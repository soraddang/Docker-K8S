----------------------------------------------------------------------------------
1. 쿠버네티스 설치 준비
-----------------------------------------------------------------------------
 1.1 메모리 swap 기능 비활성화
    swapoff -a                          #swap 임시 비활성화
    sed -i '/swap/s/^/#/' /etc/fstab    #swap 영구 비활성화 
    free -m                             #메모리 상태 확인
    swapon -s                           #swap 메모리 상태 확인, 출력값이 없으면 swap 메모리 비활성화 상태


     ※위 방법으로 비활성화 되지 않는 경우
           systemctl list-unit-files --type swap      #swap unit 조회
           systemctl mask [swap unit명]               #swap unit(dev-파티션이름.swap)을 mask해서 비활성화
            ex) systemctl mask dev-sda3.swap
           systemctl list-unit-files --type swap      #비활성화 적용 확인

1.2 방화벽 설정 ( 방화벽 비활성화)
     apt-get install -y firewalld
     systemctl stop firewalld
     systemctl disable firewalld
     firewall-cmd --list-all               #방화벽 오픈 상태 확인
     netstat -tlnp                         #방화벽 오픈 상태 확인

1.3  네트워크 옵션 설정
  1) /etc/modules-load.d/k8s.conf 파일 생성
     cat <<EOF | tee /etc/modules-load.d/k8s.conf
     br_netfilter
     EOF
 
  2)/etc/sysctl.d/k8s.conf 파일 생성
     cat <<EOF | tee /etc/sysctl.d/k8s.conf
     net.bridge.bridge-nf-call-ip6tables = 1
     net.bridge.bridge-nf-call-iptables = 1
     EOF

   3) 시스템 재시작 없이 stysctl 파라미터 반영
     sysctl --system

------------------------------------------------------------------------------------
2. 컨테이너 런타임 설치 ==> Docker 설치 후 Containerd 패키지 사용
------------------------------------------------------------------------------------
   << 컨테이너 런타임을 설치하는 방법 3가지>>
    - Docker 설치 후 Containerd 패키지 사용
    - containerd만 설치 사용
    - docker engine + cri-dockerd

 1) apt 업데이트 및 필수 패키지 설치
      apt-get update   #apt 업데이트
      apt-get install -y apt-transport-https ca-certificates curl gnupg  #필수 패키지 설치

 2) 공개키 다운로드 및 저장소 등록
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg   #공개키 다운로드

 3) 저장소 등록
     echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" |  tee /etc/apt/sources.list.d/docker.list > /dev/null

 4) 도커 설치
     apt update                                                           #저장소 추가로 apt 업데이트
     apt install -y docker.io 또는 sudo apt install -y docker-ce          #도커 설치
     docker --version                                                     #도커 버전 조회
                                                
               * docker-ce 설치 시 → 외부 종속성 패키지로 containerd.io 설치됨.
               * docker.io 설치 시 → 외부 종속성 패키지로 containerd 설치됨.
 
  5)  도커 데몬 설정
     mkdir /etc/docker                                               #/etc/docker 디렉토리 없을 경우 생성
    cat <<EOF |  tee /etc/docker/daemon.json                         #daemon.json 파일 추가
     {
        "exec-opts": ["native.cgroupdriver=systemd"],
        "log-driver": "json-file",
        "log-opts": {
             "max-size": "100m"
         },
        "storage-driver": "overlay2"
      }
     EOF

     <<필요시 cgroup(runc) 옵션 설정>>
       mkdir -p /etc/containerd                                                    #containerd 구성 파일 생성 
       containerd config default |  tee /etc/containerd/config.toml                #containerd 기본 설정값으로 config.toml 생성
       nano /etc/containerd/config.toml                                            #config.toml 파일 수정
           [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]   # cgroup driver(runc) 사용하기 설정
            SystemdCgroup = true
       systemctl restart containerd                                               #수정사항 적용 및 재실행

6). 도커 재시작
    service docker restart              #도커 재시작
    service docker status               #도커 상태 조회

--------------------------------------------------------------
3. 쿠버네티스 클러스터(Kubernetes Cluster) 설치
------------------------------------------------------------------

 3.1  apt 패키지 업데이트 및 필수 패키지 설치
    apt-get update                                                               #apt 업데이트
    apt-get install -y apt-transport-https ca-certificates curl gnupg            #필수 패키지 설치

 3.2. 구글 클라우드의 공캐  키 다운로드 및 쿠버네티스 레포지토리 추가
   curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
   echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | tee /etc/apt/sources.list.d/kubernetes.list

 3.3 쿠버네티스 패키지 설치
    apt-get update                                   #저장소 추가되었기 때문에 apt 업데이트
    apt-get install -y kubelet kubeadm kubectl       #쿠버네티스 패키지 설치
    apt-mark hold kubelet kubeadm kubectl            #쿠버네티스 패키지 버전 고정
    kubelet --version                                #쿠버네티스 설치 버전 조회
    kubeadm version 
    kubectl version
    systemctl status kubelet.service                 #kubelet service 확인
 
3.4  K8S 서비스 활성화
    systemctl daemon-reload
    systemctl restart kubelet
    systemctl enable kubelet


----------------------------------------------------------------
4. Master Node 구성
----------------------------------------------------------------
4.1. Control-Plane 구성
nano /etc/containerd/config.toml
        disabled_plugins 항목에서 CRI 제거한 뒤
kubeadm init                               #Flannel(디폴트 설정 값)

4.2 kubectl 설정
  mkdir -p $HOME/.kube
  cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  chown $(id -u):$(id -g) $HOME/.kube/config
 
4.3. CNI(Container Network Interface) 설정
<<Flannel>> 
    kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
<<Calico>> 
   curl https://docs.projectcalico.org/manifests/calico.yaml -O --insecure 
   kubectl apply -f calico.yaml

kubectl get pods -A -o wide     #CNI 적용 확인

--------------------------------------------------------------------
5. Worker Node 구성
---------------------------------------------------------------------
5.1. Worker Node 클러스터 가입
  kubeadm join [ip]:6443 --token [토큰명] --discovery-token-ca-cert-hash [hashkey]
   kubectl get pods -A -o wide

-------------------
6. 최종 확인
---------------------------------
kubectl get node
또는
kubectl get nodes -o wide
